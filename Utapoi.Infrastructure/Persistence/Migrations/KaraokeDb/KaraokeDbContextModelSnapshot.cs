// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Utapoi.Infrastructure.Persistence.Contexts;

#nullable disable

namespace Karaoke.Infrastructure.Persistence.Migrations.KaraokeDb
{
    [DbContext(typeof(UtapoiDbContext))]
    partial class KaraokeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("AlbumSinger", b =>
                {
                    b.Property<Guid>("AlbumsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SingersId")
                        .HasColumnType("TEXT");

                    b.HasKey("AlbumsId", "SingersId");

                    b.HasIndex("SingersId");

                    b.ToTable("AlbumSinger");
                });

            modelBuilder.Entity("AlbumSong", b =>
                {
                    b.Property<Guid>("AlbumsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongsId")
                        .HasColumnType("TEXT");

                    b.HasKey("AlbumsId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("AlbumSong");
                });

            modelBuilder.Entity("CollectionSong", b =>
                {
                    b.Property<Guid>("CollectionsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CollectionsId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("CollectionSong");
                });

            modelBuilder.Entity("ComposerSong", b =>
                {
                    b.Property<Guid>("ComposersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ComposersId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("ComposerSong");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CoverId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CoverId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Collection");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Composer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Composer");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.KaraokeInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SingersCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SongId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("SongId");

                    b.ToTable("KaraokeInfo");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.LocalizedString", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ComposerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ComposerId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SongId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SongWriterId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SongWriterId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WorkId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WorkId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("ComposerId");

                    b.HasIndex("ComposerId1");

                    b.HasIndex("SongId");

                    b.HasIndex("SongWriterId");

                    b.HasIndex("SongWriterId1");

                    b.HasIndex("WorkId");

                    b.HasIndex("WorkId1");

                    b.ToTable("LocalizedStrings");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Lyrics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phrases")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("Lyrics");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.NamedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Singer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CoverId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<float>("Height")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CoverId");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("Singers");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<long>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("InstrumentalId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OriginalFileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalLanguage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PreviewId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ThumbnailId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VocalId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentalId");

                    b.HasIndex("OriginalFileId");

                    b.HasIndex("PreviewId");

                    b.HasIndex("ThumbnailId");

                    b.HasIndex("VocalId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.SongWriter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SongWriter");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SongId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("SongId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SongId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("Work");
                });

            modelBuilder.Entity("Karaoke.Infrastructure.Identity.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Karaoke.Infrastructure.Identity.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Karaoke.Infrastructure.Identity.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("KaraokeInfoUser", b =>
                {
                    b.Property<Guid>("CreatorsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("KaraokeId")
                        .HasColumnType("TEXT");

                    b.HasKey("CreatorsId", "KaraokeId");

                    b.HasIndex("KaraokeId");

                    b.ToTable("KaraokeInfoUser");
                });

            modelBuilder.Entity("SingerActivitiesLocalizedString", b =>
                {
                    b.Property<Guid>("ActivitiesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Singer3Id")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivitiesId", "Singer3Id");

                    b.HasIndex("Singer3Id");

                    b.ToTable("SingerActivitiesLocalizedString");
                });

            modelBuilder.Entity("SingerDescriptionsLocalizedString", b =>
                {
                    b.Property<Guid>("DescriptionsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Singer2Id")
                        .HasColumnType("TEXT");

                    b.HasKey("DescriptionsId", "Singer2Id");

                    b.HasIndex("Singer2Id");

                    b.ToTable("SingerDescriptionsLocalizedString");
                });

            modelBuilder.Entity("SingerNamesLocalizedString", b =>
                {
                    b.Property<Guid>("NamesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SingerId")
                        .HasColumnType("TEXT");

                    b.HasKey("NamesId", "SingerId");

                    b.HasIndex("SingerId");

                    b.ToTable("SingerNamesLocalizedString");
                });

            modelBuilder.Entity("SingerNicknamesLocalizedString", b =>
                {
                    b.Property<Guid>("NicknamesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Singer1Id")
                        .HasColumnType("TEXT");

                    b.HasKey("NicknamesId", "Singer1Id");

                    b.HasIndex("Singer1Id");

                    b.ToTable("SingerNicknamesLocalizedString");
                });

            modelBuilder.Entity("SingerSong", b =>
                {
                    b.Property<Guid>("SingersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongsId")
                        .HasColumnType("TEXT");

                    b.HasKey("SingersId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("SingerSong");
                });

            modelBuilder.Entity("SongSongWriter", b =>
                {
                    b.Property<Guid>("SongWritersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongsId")
                        .HasColumnType("TEXT");

                    b.HasKey("SongWritersId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("SongSongWriter");
                });

            modelBuilder.Entity("AlbumSinger", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.Singer", null)
                        .WithMany()
                        .HasForeignKey("SingersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlbumSong", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollectionSong", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.Collection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComposerSong", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.Composer", null)
                        .WithMany()
                        .HasForeignKey("ComposersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Album", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.NamedFile", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cover");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.KaraokeInfo", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.NamedFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.Song", "Song")
                        .WithMany("Karaoke")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.LocalizedString", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.Album", null)
                        .WithMany("Titles")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Karaoke.Core.Entities.Collection", null)
                        .WithMany("Names")
                        .HasForeignKey("CollectionId");

                    b.HasOne("Karaoke.Core.Entities.Composer", null)
                        .WithMany("Names")
                        .HasForeignKey("ComposerId");

                    b.HasOne("Karaoke.Core.Entities.Composer", null)
                        .WithMany("Nicknames")
                        .HasForeignKey("ComposerId1");

                    b.HasOne("Karaoke.Core.Entities.Song", null)
                        .WithMany("Titles")
                        .HasForeignKey("SongId");

                    b.HasOne("Karaoke.Core.Entities.SongWriter", null)
                        .WithMany("Names")
                        .HasForeignKey("SongWriterId");

                    b.HasOne("Karaoke.Core.Entities.SongWriter", null)
                        .WithMany("Nicknames")
                        .HasForeignKey("SongWriterId1");

                    b.HasOne("Karaoke.Core.Entities.Work", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("WorkId");

                    b.HasOne("Karaoke.Core.Entities.Work", null)
                        .WithMany("Names")
                        .HasForeignKey("WorkId1");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Lyrics", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.Song", "Song")
                        .WithMany("Lyrics")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Singer", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.NamedFile", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Karaoke.Core.Entities.NamedFile", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cover");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Song", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.NamedFile", "Instrumental")
                        .WithMany()
                        .HasForeignKey("InstrumentalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Karaoke.Core.Entities.NamedFile", "OriginalFile")
                        .WithMany()
                        .HasForeignKey("OriginalFileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Karaoke.Core.Entities.NamedFile", "Preview")
                        .WithMany()
                        .HasForeignKey("PreviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Karaoke.Core.Entities.NamedFile", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Karaoke.Core.Entities.NamedFile", "Vocal")
                        .WithMany()
                        .HasForeignKey("VocalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Instrumental");

                    b.Navigation("OriginalFile");

                    b.Navigation("Preview");

                    b.Navigation("Thumbnail");

                    b.Navigation("Vocal");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Tag", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.Collection", null)
                        .WithMany("Tags")
                        .HasForeignKey("CollectionId");

                    b.HasOne("Karaoke.Core.Entities.Song", null)
                        .WithMany("Tags")
                        .HasForeignKey("SongId");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Work", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.Song", null)
                        .WithMany("Sources")
                        .HasForeignKey("SongId");
                });

            modelBuilder.Entity("Karaoke.Infrastructure.Identity.Entities.RefreshToken", b =>
                {
                    b.HasOne("Karaoke.Infrastructure.Identity.Entities.Token", "AccessToken")
                        .WithOne()
                        .HasForeignKey("Karaoke.Infrastructure.Identity.Entities.RefreshToken", "TokenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Karaoke.Infrastructure.Identity.Entities.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccessToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Karaoke.Infrastructure.Identity.Entities.Token", b =>
                {
                    b.HasOne("Karaoke.Infrastructure.Identity.Entities.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("KaraokeInfoUser", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.KaraokeInfo", null)
                        .WithMany()
                        .HasForeignKey("KaraokeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SingerActivitiesLocalizedString", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.LocalizedString", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.Singer", null)
                        .WithMany()
                        .HasForeignKey("Singer3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SingerDescriptionsLocalizedString", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.LocalizedString", null)
                        .WithMany()
                        .HasForeignKey("DescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.Singer", null)
                        .WithMany()
                        .HasForeignKey("Singer2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SingerNamesLocalizedString", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.LocalizedString", null)
                        .WithMany()
                        .HasForeignKey("NamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.Singer", null)
                        .WithMany()
                        .HasForeignKey("SingerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SingerNicknamesLocalizedString", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.LocalizedString", null)
                        .WithMany()
                        .HasForeignKey("NicknamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.Singer", null)
                        .WithMany()
                        .HasForeignKey("Singer1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SingerSong", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.Singer", null)
                        .WithMany()
                        .HasForeignKey("SingersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SongSongWriter", b =>
                {
                    b.HasOne("Karaoke.Core.Entities.SongWriter", null)
                        .WithMany()
                        .HasForeignKey("SongWritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karaoke.Core.Entities.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Album", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Collection", b =>
                {
                    b.Navigation("Names");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Composer", b =>
                {
                    b.Navigation("Names");

                    b.Navigation("Nicknames");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Song", b =>
                {
                    b.Navigation("Karaoke");

                    b.Navigation("Lyrics");

                    b.Navigation("Sources");

                    b.Navigation("Tags");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.SongWriter", b =>
                {
                    b.Navigation("Names");

                    b.Navigation("Nicknames");
                });

            modelBuilder.Entity("Karaoke.Core.Entities.Work", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Names");
                });

            modelBuilder.Entity("Karaoke.Infrastructure.Identity.Entities.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
